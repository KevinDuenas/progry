// Generated from Progry.g4 by ANTLR 4.10
import Antlr4

open class ProgryLexer: Lexer {

	internal static var _decisionToDFA: [DFA] = {
          var decisionToDFA = [DFA]()
          let length = ProgryLexer._ATN.getNumberOfDecisions()
          for i in 0..<length {
          	    decisionToDFA.append(DFA(ProgryLexer._ATN.getDecisionState(i)!, i))
          }
           return decisionToDFA
     }()

	internal static let _sharedContextCache = PredictionContextCache()

	public
	static let PLUS=1, MINUS=2, MULT=3, DIV=4, EQUAL=5, OR=6, AND=7, MORE_THAN=8, 
            LESS_THEN=9, MORE_AND_THAN=10, LESS_AND_THAN=11, EQUAL_THAN=12, 
            DIFERENT_THAN=13, OPEN_PARENTHESIS=14, CLOSE_PARENTHESIS=15, 
            OPEN_BRACKET=16, CLOSE_BRACKET=17, OPEN_SBRACKET=18, CLOSE_SBRACKET=19, 
            MODULE=20, MAIN=21, ARRAY=22, PROGRAM_START=23, PROGRAM_END=24, 
            COLON=25, DOT_COMMA=26, COMMA=27, VAR=28, NUMBER_TYPE=29, DECIMAL_TYPE=30, 
            TEXT_TYPE=31, FLAG_TYPE=32, READ=33, WRITE=34, IF=35, ELSE=36, 
            FOR=37, WHILE=38, DO=39, TO=40, RETURN=41, VOID=42, ID=43, TEXT=44, 
            LETTER=45, DIGIT=46, DECIMAL=47, COM=48, FLAG=49, WS=50

	public
	static let channelNames: [String] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	]

	public
	static let modeNames: [String] = [
		"DEFAULT_MODE"
	]

	public
	static let ruleNames: [String] = [
		"PLUS", "MINUS", "MULT", "DIV", "EQUAL", "OR", "AND", "MORE_THAN", "LESS_THEN", 
		"MORE_AND_THAN", "LESS_AND_THAN", "EQUAL_THAN", "DIFERENT_THAN", "OPEN_PARENTHESIS", 
		"CLOSE_PARENTHESIS", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_SBRACKET", 
		"CLOSE_SBRACKET", "MODULE", "MAIN", "ARRAY", "PROGRAM_START", "PROGRAM_END", 
		"COLON", "DOT_COMMA", "COMMA", "VAR", "NUMBER_TYPE", "DECIMAL_TYPE", "TEXT_TYPE", 
		"FLAG_TYPE", "READ", "WRITE", "IF", "ELSE", "FOR", "WHILE", "DO", "TO", 
		"RETURN", "VOID", "ID", "TEXT", "LETTER", "DIGIT", "DECIMAL", "COM", "FLAG", 
		"WS"
	]

	private static let _LITERAL_NAMES: [String?] = [
		nil, "'+'", "'-'", "'*'", "'/'", "'='", "'||'", "'&&'", "'>'", "'<'", 
		"'>='", "'<='", "'=='", "'!='", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"'module'", "'main'", "'array'", "'PROGRAM_START'", "'PROGRAM_END'", "':'", 
		"';'", "','", "'var'", "'number'", "'decimal'", "'text'", "'flag'", "'read'", 
		"'write'", "'if'", "'else'", "'for'", "'while'", "'do'", "'to'", "'return'", 
		"'void'", nil, nil, nil, nil, nil, "'\"'"
	]
	private static let _SYMBOLIC_NAMES: [String?] = [
		nil, "PLUS", "MINUS", "MULT", "DIV", "EQUAL", "OR", "AND", "MORE_THAN", 
		"LESS_THEN", "MORE_AND_THAN", "LESS_AND_THAN", "EQUAL_THAN", "DIFERENT_THAN", 
		"OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_SBRACKET", "CLOSE_SBRACKET", "MODULE", "MAIN", "ARRAY", "PROGRAM_START", 
		"PROGRAM_END", "COLON", "DOT_COMMA", "COMMA", "VAR", "NUMBER_TYPE", "DECIMAL_TYPE", 
		"TEXT_TYPE", "FLAG_TYPE", "READ", "WRITE", "IF", "ELSE", "FOR", "WHILE", 
		"DO", "TO", "RETURN", "VOID", "ID", "TEXT", "LETTER", "DIGIT", "DECIMAL", 
		"COM", "FLAG", "WS"
	]
	public
	static let VOCABULARY = Vocabulary(_LITERAL_NAMES, _SYMBOLIC_NAMES)


	override open
	func getVocabulary() -> Vocabulary {
		return ProgryLexer.VOCABULARY
	}

	public
	required init(_ input: CharStream) {
	    RuntimeMetaData.checkVersion("4.10", RuntimeMetaData.VERSION)
		super.init(input)
		_interp = LexerATNSimulator(self, ProgryLexer._ATN, ProgryLexer._decisionToDFA, ProgryLexer._sharedContextCache)
	}

	override open
	func getGrammarFileName() -> String { return "Progry.g4" }

	override open
	func getRuleNames() -> [String] { return ProgryLexer.ruleNames }

	override open
	func getSerializedATN() -> [Int] { return ProgryLexer._serializedATN }

	override open
	func getChannelNames() -> [String] { return ProgryLexer.channelNames }

	override open
	func getModeNames() -> [String] { return ProgryLexer.modeNames }

	override open
	func getATN() -> ATN { return ProgryLexer._ATN }

	static let _serializedATN:[Int] = [
		4,0,50,327,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
		7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
		1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
		1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
		1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,
		1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,
		1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,
		1,42,5,42,275,8,42,10,42,12,42,278,9,42,1,43,1,43,1,43,1,43,5,43,284,8,
		43,10,43,12,43,287,9,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,4,46,296,8,
		46,11,46,12,46,297,1,46,1,46,4,46,302,8,46,11,46,12,46,303,3,46,306,8,
		46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,319,8,48,
		1,49,4,49,322,8,49,11,49,12,49,323,1,49,1,49,0,0,50,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
		83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,1,0,2,2,0,65,90,
		97,122,3,0,9,10,13,13,32,32,336,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
		7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
		29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
		0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
		0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
		0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,
		105,1,0,0,0,7,107,1,0,0,0,9,109,1,0,0,0,11,111,1,0,0,0,13,114,1,0,0,0,
		15,117,1,0,0,0,17,119,1,0,0,0,19,121,1,0,0,0,21,124,1,0,0,0,23,127,1,0,
		0,0,25,130,1,0,0,0,27,133,1,0,0,0,29,135,1,0,0,0,31,137,1,0,0,0,33,139,
		1,0,0,0,35,141,1,0,0,0,37,143,1,0,0,0,39,145,1,0,0,0,41,152,1,0,0,0,43,
		157,1,0,0,0,45,163,1,0,0,0,47,177,1,0,0,0,49,189,1,0,0,0,51,191,1,0,0,
		0,53,193,1,0,0,0,55,195,1,0,0,0,57,199,1,0,0,0,59,206,1,0,0,0,61,214,1,
		0,0,0,63,219,1,0,0,0,65,224,1,0,0,0,67,229,1,0,0,0,69,235,1,0,0,0,71,238,
		1,0,0,0,73,243,1,0,0,0,75,247,1,0,0,0,77,253,1,0,0,0,79,256,1,0,0,0,81,
		259,1,0,0,0,83,266,1,0,0,0,85,271,1,0,0,0,87,279,1,0,0,0,89,290,1,0,0,
		0,91,292,1,0,0,0,93,295,1,0,0,0,95,307,1,0,0,0,97,318,1,0,0,0,99,321,1,
		0,0,0,101,102,5,43,0,0,102,2,1,0,0,0,103,104,5,45,0,0,104,4,1,0,0,0,105,
		106,5,42,0,0,106,6,1,0,0,0,107,108,5,47,0,0,108,8,1,0,0,0,109,110,5,61,
		0,0,110,10,1,0,0,0,111,112,5,124,0,0,112,113,5,124,0,0,113,12,1,0,0,0,
		114,115,5,38,0,0,115,116,5,38,0,0,116,14,1,0,0,0,117,118,5,62,0,0,118,
		16,1,0,0,0,119,120,5,60,0,0,120,18,1,0,0,0,121,122,5,62,0,0,122,123,5,
		61,0,0,123,20,1,0,0,0,124,125,5,60,0,0,125,126,5,61,0,0,126,22,1,0,0,0,
		127,128,5,61,0,0,128,129,5,61,0,0,129,24,1,0,0,0,130,131,5,33,0,0,131,
		132,5,61,0,0,132,26,1,0,0,0,133,134,5,40,0,0,134,28,1,0,0,0,135,136,5,
		41,0,0,136,30,1,0,0,0,137,138,5,123,0,0,138,32,1,0,0,0,139,140,5,125,0,
		0,140,34,1,0,0,0,141,142,5,91,0,0,142,36,1,0,0,0,143,144,5,93,0,0,144,
		38,1,0,0,0,145,146,5,109,0,0,146,147,5,111,0,0,147,148,5,100,0,0,148,149,
		5,117,0,0,149,150,5,108,0,0,150,151,5,101,0,0,151,40,1,0,0,0,152,153,5,
		109,0,0,153,154,5,97,0,0,154,155,5,105,0,0,155,156,5,110,0,0,156,42,1,
		0,0,0,157,158,5,97,0,0,158,159,5,114,0,0,159,160,5,114,0,0,160,161,5,97,
		0,0,161,162,5,121,0,0,162,44,1,0,0,0,163,164,5,80,0,0,164,165,5,82,0,0,
		165,166,5,79,0,0,166,167,5,71,0,0,167,168,5,82,0,0,168,169,5,65,0,0,169,
		170,5,77,0,0,170,171,5,95,0,0,171,172,5,83,0,0,172,173,5,84,0,0,173,174,
		5,65,0,0,174,175,5,82,0,0,175,176,5,84,0,0,176,46,1,0,0,0,177,178,5,80,
		0,0,178,179,5,82,0,0,179,180,5,79,0,0,180,181,5,71,0,0,181,182,5,82,0,
		0,182,183,5,65,0,0,183,184,5,77,0,0,184,185,5,95,0,0,185,186,5,69,0,0,
		186,187,5,78,0,0,187,188,5,68,0,0,188,48,1,0,0,0,189,190,5,58,0,0,190,
		50,1,0,0,0,191,192,5,59,0,0,192,52,1,0,0,0,193,194,5,44,0,0,194,54,1,0,
		0,0,195,196,5,118,0,0,196,197,5,97,0,0,197,198,5,114,0,0,198,56,1,0,0,
		0,199,200,5,110,0,0,200,201,5,117,0,0,201,202,5,109,0,0,202,203,5,98,0,
		0,203,204,5,101,0,0,204,205,5,114,0,0,205,58,1,0,0,0,206,207,5,100,0,0,
		207,208,5,101,0,0,208,209,5,99,0,0,209,210,5,105,0,0,210,211,5,109,0,0,
		211,212,5,97,0,0,212,213,5,108,0,0,213,60,1,0,0,0,214,215,5,116,0,0,215,
		216,5,101,0,0,216,217,5,120,0,0,217,218,5,116,0,0,218,62,1,0,0,0,219,220,
		5,102,0,0,220,221,5,108,0,0,221,222,5,97,0,0,222,223,5,103,0,0,223,64,
		1,0,0,0,224,225,5,114,0,0,225,226,5,101,0,0,226,227,5,97,0,0,227,228,5,
		100,0,0,228,66,1,0,0,0,229,230,5,119,0,0,230,231,5,114,0,0,231,232,5,105,
		0,0,232,233,5,116,0,0,233,234,5,101,0,0,234,68,1,0,0,0,235,236,5,105,0,
		0,236,237,5,102,0,0,237,70,1,0,0,0,238,239,5,101,0,0,239,240,5,108,0,0,
		240,241,5,115,0,0,241,242,5,101,0,0,242,72,1,0,0,0,243,244,5,102,0,0,244,
		245,5,111,0,0,245,246,5,114,0,0,246,74,1,0,0,0,247,248,5,119,0,0,248,249,
		5,104,0,0,249,250,5,105,0,0,250,251,5,108,0,0,251,252,5,101,0,0,252,76,
		1,0,0,0,253,254,5,100,0,0,254,255,5,111,0,0,255,78,1,0,0,0,256,257,5,116,
		0,0,257,258,5,111,0,0,258,80,1,0,0,0,259,260,5,114,0,0,260,261,5,101,0,
		0,261,262,5,116,0,0,262,263,5,117,0,0,263,264,5,114,0,0,264,265,5,110,
		0,0,265,82,1,0,0,0,266,267,5,118,0,0,267,268,5,111,0,0,268,269,5,105,0,
		0,269,270,5,100,0,0,270,84,1,0,0,0,271,276,3,89,44,0,272,275,3,89,44,0,
		273,275,3,91,45,0,274,272,1,0,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,
		274,1,0,0,0,276,277,1,0,0,0,277,86,1,0,0,0,278,276,1,0,0,0,279,285,3,95,
		47,0,280,284,3,89,44,0,281,284,3,91,45,0,282,284,3,99,49,0,283,280,1,0,
		0,0,283,281,1,0,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,
		286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,3,95,47,0,289,88,1,
		0,0,0,290,291,7,0,0,0,291,90,1,0,0,0,292,293,2,48,57,0,293,92,1,0,0,0,
		294,296,2,48,57,0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,1,0,0,0,297,
		298,1,0,0,0,298,305,1,0,0,0,299,301,5,46,0,0,300,302,2,48,57,0,301,300,
		1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,
		0,305,299,1,0,0,0,305,306,1,0,0,0,306,94,1,0,0,0,307,308,5,34,0,0,308,
		96,1,0,0,0,309,310,5,116,0,0,310,311,5,114,0,0,311,312,5,117,0,0,312,319,
		5,101,0,0,313,314,5,102,0,0,314,315,5,97,0,0,315,316,5,108,0,0,316,317,
		5,115,0,0,317,319,5,101,0,0,318,309,1,0,0,0,318,313,1,0,0,0,319,98,1,0,
		0,0,320,322,7,1,0,0,321,320,1,0,0,0,322,323,1,0,0,0,323,321,1,0,0,0,323,
		324,1,0,0,0,324,325,1,0,0,0,325,326,6,49,0,0,326,100,1,0,0,0,10,0,274,
		276,283,285,297,303,305,318,323,1,6,0,0
	]

	public
	static let _ATN: ATN = try! ATNDeserializer().deserialize(_serializedATN)
}